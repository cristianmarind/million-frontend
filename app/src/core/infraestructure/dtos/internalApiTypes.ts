import 'server-only'

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
*/

export interface paths {
    "/api/owners/find": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["OwnerFilterOptions"];
                    "text/json": components["schemas"]["OwnerFilterOptions"];
                    "application/*+json": components["schemas"]["OwnerFilterOptions"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["OwnerDtoIEnumerableResult"];
                        "application/json": components["schemas"]["OwnerDtoIEnumerableResult"];
                        "text/json": components["schemas"]["OwnerDtoIEnumerableResult"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/properties/find": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["PropertyFilterOptions"];
                    "text/json": components["schemas"]["PropertyFilterOptions"];
                    "application/*+json": components["schemas"]["PropertyFilterOptions"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["PropertyDtoIEnumerableResult"];
                        "application/json": components["schemas"]["PropertyDtoIEnumerableResult"];
                        "text/json": components["schemas"]["PropertyDtoIEnumerableResult"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        OwnerDto: {
            name: string;
            address: string;
            photo: string;
            /** Format: date-time */
            birthday: string;
        };
        OwnerDtoIEnumerableResult: {
            success?: boolean;
            error?: string | null;
            value?: components["schemas"]["OwnerDto"][] | null;
        };
        OwnerFilterOptions: {
            ownerIdList: string[];
        };
        PresentationConfigDto: {
            /** Format: int32 */
            coverImageIndex: number;
            listClass: string;
        };
        PropertyDto: {
            /** Format: uuid */
            id?: string;
            name: string;
            address: string;
            /** Format: double */
            price: number;
            /** Format: int32 */
            year: number;
            /** Format: uuid */
            ownerId: string;
            imageUrls: string[];
            propertyTraces: components["schemas"]["PropertyTraceDto"][];
            presentationConfig: components["schemas"]["PresentationConfigDto"];
        };
        PropertyDtoIEnumerableResult: {
            success?: boolean;
            error?: string | null;
            value?: components["schemas"]["PropertyDto"][] | null;
        };
        PropertyFilterOptions: {
            name?: string | null;
            address?: string | null;
            /** Format: double */
            minPrice?: number | null;
            /** Format: double */
            maxPrice?: number | null;
            /** Format: int32 */
            page?: number | null;
            /** Format: int32 */
            pageSize?: number | null;
        };
        PropertyTraceDto: {
            name: string;
            /** Format: date-time */
            date: string;
            /** Format: double */
            value: number;
            /** Format: double */
            tax: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
